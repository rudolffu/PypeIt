*********************
Quick-Look Reductions
*********************

Overview
========

PypeIt provides a quicklook script ``pypeit_ql`` for
quick reductions, presumably at the telescope.

The approach is to (1) generate calibration files if needed 
using an auto-generated :doc:`pypeit_file`
and then (2) process the input science file(s) with
a separate auto-generated :doc:`pypeit_file`.
These are generally organized in separate directories
along with the output products (see below).
This script performs a boxcar (only) extraction of 
long- or multi-slit observations.

The script does expect (effectively requires) that 
PypeIt will correctly frametype the input frames.  
If this fails, so too will the script. 
A future revision may allow the user to specify the
frametypes.
 

The script usage can be displayed by calling the script with the
``-h`` option:

.. include:: help/pypeit_ql.rst

At present, only a few spectrographs have been
extensively tested:  
``shane_kast_blue``, ``shane_kast_red``, ``keck_lris_red``, 
``keck_deimos``.

Folder tree 
+++++++++++

One or more folders are generated in a run with ``pypeit_ql``.

The primary folder containts the science outputs 
in ``Science/`` and QA products related to extraction
and a soft-link to the ``Masters/`` folder.
It is named after the input science file(s).  If there is only
one file processed, the folder is given the name of the file
with the ``.fits`` extension removed (e.g. ``b27.fits`` becomes
``b27``).  
If there are multiple files processed, the folder is given the
root names of the first and last files separated by a dash
(e.g. ``b27.fits`` and ``b28.fits`` become ``b27-b28``).
This primary folder
will appear in the path specified by ``--redux_path``, which
defaults to the current working directory.

If calibration files are generated, one folder per setup
will appear in the path specified by ``--calib_dir``,
which defaults to the path given by ``-redux_path``. 
These will have names like ``instr_A`` where ``instr`` is the
spectograph, e.g. ``keck_lris_red``, and ``A`` is the setup.

PypeIt Files
++++++++++++

Each folder generated by ``pypeit_ql`` will contain an
auto-generated :doc:`pypeit_file`.  The configuration
parameters will include ``quicklook = True`` which will
set a series of parameters to values appropriate for
a quicklook reduction.

The :doc:`pypeit_file` for the science data will also
include:

.. code-block:: ini

    [baseprocess]
        master_setup_and_bit = SETUP_BIT

where ``SETUP`` and ``BIT`` are taken from the masters
files found in the ``Masters/`` folder.  
For example, ``SETUP_BIT`` may be ``A_7``. 
This should
ensure that the science data are processed using the
correct calibrations.


Longslit
========

The default quicklook mode for longslit reductions
is to use the ``boxcar`` extraction method, skip
bias image subtraction (maintain overscan), and skip
CR rejection. 

Standard call
+++++++++++++

Here is a sample call for a standard
longslit run on files from the ``shane_kast_blue`` 
Development suite.  In the example, the files
b1.fits.gz b10.fits.gz b27.fits.gz are an
arc, flat, and science frame.  But their ordering
is not important.

.. code-block:: bash

    pypeit_ql shane_kast_blue --full_rawpath /home/xavier/Projects/PypeIt-codes/PypeIt-development-suite/RAW_DATA/shane_kast_blue/600_4310_d55 --rawfiles b1.fits.gz b10.fits.gz b27.fits.gz 

This call first generates a ``shane_kast_blue_A`` folder with the 
processed calibrations (Masters) and associated QA :doc:`outputs`.
It then generates a separate folder named ``b27`` which holds
the ``Science`` folder with the processed 2D spectral
image and the extracted spectra.

Previous Calibrations
+++++++++++++++++++++

There are various ways to use previously generated
calibration files.  We provide examples of each.

Different file
--------------

Simply re-running the script
above but replacing the ``b27.fits.gz`` file with
``b28.fits.gz`` 
will reuse the calibrations we just made: 

.. code-block:: bash

    pypeit_ql shane_kast_blue --full_rawpath /home/xavier/Projects/PypeIt-codes/PypeIt-development-suite/RAW_DATA/shane_kast_blue/600_4310_d55 --rawfiles b1.fits.gz b10.fits.gz b28.fits.gz 

Here the script will detect that the calibration
files are already present and will only process the science
frame.  Therefore, files ``b1.fits.gz`` and ``b10.fits.gz`` are 
entirely ignored.

You can, however, force a re-generation of the calibrations
with ``--clobber_calibs``.


Masters Folder
--------------

One can specifiy the path to a set of Masters files
for use as calibrations with ``--masters_dir``.  

.. code-block:: bash

    pypeit_ql shane_kast_blue --full_rawpath /home/xavier/Projects/PypeIt-codes/PypeIt-development-suite/RAW_DATA/shane_kast_blue/600_4310_d55 --rawfiles b1.fits.gz b10.fits.gz b27.fits.gz b28.fits.gz --masters_dir /home/xavier/Projects/PypeIt-codes/PypeIt-development-suite/REDUX_OUT/shane_kast_blue/TMP/shane_kast_blue_A/Masters

Note that the code will adopt the setup and bit number
of the Masters files.

Warning:  the code will not check that the configuration
of these calibration files match the science frames.

Calibrations Folder
-------------------

One can specifiy the path to a folder containing 
one or more *sub-folders* of reduced calibration files,
each of which would hold a Masters/ folder.
This is set with the ``--calib_dir`` option.

A standard use case is for ``keck_deimos`` reductions
where the calibrations were auto-generated in the
afternoon by WMKO scripts.  

But here is an example with the ``shane_kast_blue``:

.. code-block:: bash

    pypeit_ql shane_kast_blue --full_rawpath /home/xavier/Projects/PypeIt-codes/PypeIt-development-suite/RAW_DATA/shane_kast_blue/600_4310_d55 --rawfiles b1.fits.gz b10.fits.gz b27.fits.gz b28.fits.gz --calib_dir /home/xavier/Projects/PypeIt-codes/PypeIt-development-suite/REDUX_OUT/shane_kast_blue/TMP 

At least one set of the calibrations must have a 
configuration matching the science frames.

Stacked frames
++++++++++++++

If you perform the call with multiple science frames,
the default mode is to stack these frames and then
perform sky subtraction, object finding, and extraction.

Here is an example call:

.. code-block:: bash

    pypeit_ql shane_kast_blue --full_rawpath /home/xavier/Projects/PypeIt-codes/PypeIt-development-suite/RAW_DATA/shane_kast_blue/600_4310_d55 --rawfiles b1.fits.gz b10.fits.gz b27.fits.gz b28.fits.gz 

This generates a folder named ``b27-b28`` with one 
``spec2d`` and one ``spec1d`` file in the ``Science`` folder.

You can force the script to process each science frame
individually with ``--no_stack``.
This is the same as making multiple calls with ``pypeit_ql``
replacing the science file each time, except the 
folders generated would be ``b27``, ``b28``, etc.

Other Options
+++++++++++++

Here are a few more options

--box_radius
------------

Over-ride the default boxcar extraction radius with
``--box_radius``.  The value is given in arcseconds.
This will over-ride the defaut as described
in :ref:`extractionpar`.

--det
-----

It will greatly speed things up to isolate
the detector(s) of interest.  Use ``--det`` 
with the same syntax as the parameter ``detnum``,
as described in :ref:`reduxpar`.

Here is an example with the (old) ``keck_lris_red``
detector:

.. code-block:: bash

    pypeit_ql keck_lris_red --full_rawpath /home/xavier/Projects/PypeIt-codes/PypeIt-development-suite/RAW_DATA/keck_lris_red/long_600_7500_d560  --rawfiles LR.20160216.40478.fits.gz  --masters_dir /home/xavier/Projects/PypeIt-codes/PypeIt-development-suite/REDUX_OUT/keck_lris_red/long_600_7500_d560/Masters --det 2

This will only process the second detector.


Multislit
=========

Here are some options specific to multi-slit
observations.

Isolating a slit
++++++++++++++++

In general, reducing all of the slits from
a multi-slit observation will not be quick.
Therefore, you may wish to isolate a single slit.

This can be done in two ways.

--slitspatnum
-------------

Specify the detector and spatial position of the slit
you wish to reduce.

Here is an example with ``keck_deimos``:

.. code-block:: bash

    pypeit_ql keck_deimos --full_rawpath /home/xavier/Projects/PypeIt-codes/PypeIt-development-suite/RAW_DATA/keck_deimos/600ZD_M_6500 --rawfiles d1010_0056.fits.gz --masters_dir /home/xavier/Projects/PypeIt-codes/PypeIt-development-suite/REDUX_OUT/keck_deimos/600ZD_M_6500/Masters --slitspatnum MSC02:452


Here we have specified ``--slitspatnum`` as
``MSC02:452``, which means use the 2nd mosaic
and the slit closest to position 452.

This requires that the detector(s) with this
slit have been calibrated (or will be calibrated, e.g. by 
specfiying ``--det``).

--maskID
--------

Specify the user defined maskID value for the slit of interest.
This will be an integer, e.g.  958454.

Here is an example with ``keck_deimos``:

.. code-block:: bash

    pypeit_ql keck_deimos --full_rawpath /home/xavier/Projects/PypeIt-codes/PypeIt-development-suite/RAW_DATA/keck_deimos/600ZD_M_6500 --rawfiles d1010_0056.fits.gz --masters_dir /home/xavier/Projects/PypeIt-codes/PypeIt-development-suite/REDUX_OUT/keck_deimos/600ZD_M_6500/Masters --maskID 958454

This requires that the detector(s) with this
slit have been calibrated (or will be calibrated, e.g. by 
specfiying ``--det``).
